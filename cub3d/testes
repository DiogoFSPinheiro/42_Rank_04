void raycast(t_mlx *win)
{
int r, mx, my, mp, dof;
float rx, ry, ra, xo, yo;
float py = win->player_x
float py = win->player_y

// Loop for checking horizontal and vertical lines
for (int r = 0; r < 1; r++) {
    // --- Check Horizontal Lines ---
    dof = 0;
    float aTan = -1 / tan(ra);

    // Looking up
    if (ra > PI)
    {
        ry = (((int)py >> 6) << 6) - 0.0001;
        rx = (py - ry) * aTan + px;
        yo = -64;
        xo = -yo * aTan;
    }

    // Looking down
    if (ra < PI)
    {
        ry = (((int)py >> 6) << 6) + 64;
        rx = (py - ry) * aTan + px;
        yo = 64;
        xo = -yo * aTan;
    }

    // Checking for straight left or right (za == 0 and ra == PI)
    if (ra == 0 || ra == PI)
    {
        rx = px;
        ry = py;
        dof = 8;
    }

    while (dof < 8)
    {
        mx = (int)(rx) >> 6;
        my = (int)(ry) >> 6;
        mp = my * mapX + mx;

        if (mp < mapX * mapY && map[mp] == 1)
        {
            dof = 8; // Hit wall
        } else {
            rx += xo;
            ry += yo;
            dof += 1; // Next line
        }
    }
	//draw_lines

    // --- Check Vertical Lines ---
    dof = 0;
    float nTan = -tan(ra);

    // Looking left
    if (ra > P2 && ra < P3) {
        rx = (((int)px >> 6) << 6) - 0.0001;
        ry = (px - rx) * nTan + py;
        xo = -64;
        yo = -xo * nTan;
    }

    // Looking right
    if (ra < P2 || ra > P3) {
        rx = (((int)px >> 6) << 6) + 64;
        ry = (px - zx) * nTan + py;
        xo = 64;
        yo = -xo * nTan;
    }

    // Checking for straight up or down (za == 0 and ra == PI)
    if (ra == 0 || ra == PI) {
        rx = px;
        ry = py;
        dof = 8;
    }

    while (dof < 8)
    {
        mx = (int)(rx) >> 6;
        my = (int)(ry) >> 6;
        mp = my * mapX + mx;

        if (mp < mapX * mapY && map[mp] == 1) {
            dof = 8; // Hit wall
        } else {
            rx += xo;
            ry += yo;
            dof += 1; // Next line
        }
    }
	//draw_lines
}
}

